import streamlit as st
import sys
import os
import pandas as pd
from datetime import datetime

# --- System Path Setup ---
# This allows the Streamlit app to find the 'utils' directory
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from utils.helpers import read_tickerlist_from_s3, save_list_to_s3, read_df_from_s3, list_files_in_s3_dir

# --- Page Configuration ---
st.set_page_config(
    page_title="Trading System Dashboard",
    layout="wide"
)

# --- Auto-Refresh ---
# This will automatically refresh the page every 60 seconds
st.html("<meta http-equiv='refresh' content='60'>")

# --- Main Title ---
st.title("Trading System Control Panel & Dashboard")
st.caption(f"Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# --- Main Layout (Sidebar for controls, Main area for data) ---
with st.sidebar:
    st.header("Master Ticker List")
    
    # Read the current list from the cloud to display it
    try:
        current_tickers = read_tickerlist_from_s3('tickerlist.txt')
        current_tickers_str = "\n".join(current_tickers)
    except Exception as e:
        st.error(f"Could not load ticker list: {e}")
        current_tickers_str = ""

    st.write("Enter tickers for the day (one per line). This will overwrite the current list.")

    # Text area for user input
    new_tickers_input = st.text_area(
        "Tickers:",
        value=current_tickers_str,
        height=300,
        label_visibility="collapsed"
    )

    # Button to update the list
    if st.button("Update Master Ticker List", use_container_width=True):
        if new_tickers_input:
            new_tickers_list = [ticker.strip().upper() for ticker in new_tickers_input.split('\n') if ticker.strip()]
            save_list_to_s3(new_tickers_list, 'tickerlist.txt')
            st.success(f"Ticker list updated with {len(new_tickers_list)} tickers!")
            st.rerun()
        else:
            st.warning("Ticker list cannot be empty.")

# --- Main Display Area ---

# --- 1. Final Trade Plans ---
st.header("‚úÖ Actionable Trade Plans")
trade_signals_df = read_df_from_s3('data/trade_signals.csv')

if not trade_signals_df.empty:
    st.write("These are the latest, actionable trade plans generated by the system.")
    st.dataframe(trade_signals_df, use_container_width=True, hide_index=True)
else:
    st.info("No valid trade plans found yet. The system may be warming up or there may be no setups matching your criteria at this time.")

st.divider()

# --- 2. Raw Screener Outputs ---
st.header("üîç Raw Screener Outputs")
st.write("This section shows the live, unfiltered output from each individual screener.")

# Define the screeners we want to display
screener_list = [
    'gapgo', 'orb', 'avwap', 'breakout', 'ema_pullback', 'exhaustion'
]

# Create tabs for each screener
screener_tabs = st.tabs([s.capitalize() for s in screener_list])

for i, screener_name in enumerate(screener_list):
    with screener_tabs[i]:
        st.subheader(f"{screener_name.capitalize()} Screener Results")
        
        # Read the corresponding signal file from the cloud
        screener_df = read_df_from_s3(f'data/signals/{screener_name}_signals.csv')
        
        if not screener_df.empty:
            # Display only the rows that are valid or being watched
            display_df = screener_df[screener_df.get('Status', 'N/A').isin(['Entry', 'Watch'])]
            if not display_df.empty:
                 st.dataframe(display_df, use_container_width=True, hide_index=True)
            else:
                 st.info(f"No active signals ('Entry' or 'Watch') from the {screener_name} screener right now.")
        else:
            st.info(f"The {screener_name} screener has not generated any signals yet.")

